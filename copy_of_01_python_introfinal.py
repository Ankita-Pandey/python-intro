# -*- coding: utf-8 -*-
"""Copy of 01-Python IntroFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DCm7T9tUwyxS_sH2L1WtHh7192HBf1Cr

#  Introduction to Python

##***Welcome to your first iPython Notebook.***

![python](https://cognitiveclass.ai/wp-content/uploads/2016/10/Machine-Learning-with-Python.png)

## **About iPython Notebooks**

iPython Notebooks are interactive coding environments embedded in a webpage. You will be using iPython notebooks in this class. You only need to write code between the ### START CODE HERE ### and ### END CODE HERE ### comments. After writing your code, you can run the cell by either pressing "SHIFT"+"ENTER" or by clicking on "Run Cell" (denoted by a play symbol) in the left bar of the cell.


**In this notebook you will learn -**

* Basic Syntax
* Variables
* Numbers
* Casting
* String

#Your First Program

**Printing statements and numbers.**

We can use **print** function to display a string , integers, float, complex numbers.

**Example:**
"""

print("Hello Friend")
print(30)

"""**Exercise 1.1:** 
Display "Batman is the best superhero" using print function.
"""

### START CODE HERE ### (1 line of code)

### END CODE HERE ###

"""**Expected Output: **"Batman is the best superhero"

Exercise 1.2:
print "Python"
"""

### START CODE HERE ### (≈ 3 lines of code)

​

​

### END CODE HERE ###

"""Expected Output:

python

Exercise 1.3:
print "Hello world"
"""

### START CODE HERE ### (≈ 3 lines of code)

​

​

### END CODE HERE ###

"""Expected Output: 

Hello world

#Python Variables

**Creating Variables :**

Unlike other programming languages, Python has no command for declaring a variable.

A variable is created the moment you first assign a value to it.

**Example:**
"""

x = 5
y = "Python"
print(x)
print(y)

"""Variables do not need to be declared with any particular type and can even change type after they have been set."""

x = 4                    # x is of type int
y = "python"              # x is now of type str
print(x)
print(y)

"""**Variable Names :**

A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables:



*   A variable name must start with a letter or the underscore character.
*   A variable name cannot start with a number.
*   A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ).
*   Variable names are case-sensitive (age, Age and AGE are three different variables).


**NOTE:** Remember that variables are case-sensitive.

**Exercise 1.4:**

Create a variable **x** and assign value 10 to it. Create another variable **y** and assign the string **Hello there**. Print both variables.
"""

### START CODE HERE ### (4 line of code)



### END CODE HERE ###

"""**Expected Output:**

10

Hello there

**Exercise 1.5:**

Create a variable called **z**, assign** x + y** to it, and display the result.
"""

### START CODE HERE ### 

### END CODE HERE ###

"""**Expected output: **  

20

Exercise 1.6:

Create a variable x and assign value 20 to it. Create another variable y and assign the string Hello World. Print both variables.**
"""

### START CODE HERE ### (≈ 3 lines of code)

​

​

### END CODE HERE ###

"""Expected Output: 

20

Hello World

Exercise 1.7:

Create a variable x and assign 25 to it. Create another variable y and assign the string Python. Print both variables.
"""

### START CODE HERE ### (≈ 3 lines of code)

​

​

### END CODE HERE ###

"""Expected Output:

5

Python

Exercise 1.8:

Create a variable called z, assign x + y to it, and display the result.
"""

### START CODE HERE ### (≈ 3 lines of code)

x = 5

y = 10

​

### END CODE HERE ###

"""Expected Output: 15

Exercise 1.9:             create a variable x , store value 4 in it. now update the value of x by hello . print x.
"""

### START CODE HERE ### (≈ 3 lines of code)



### END CODE HERE ###

"""Expected Output: hello

Exercise 1.10 : store world in x then print hello world in print by using plus poprator
"""

### START CODE HERE ### (≈ 3 lines of code)



### END CODE HERE ###

"""Expected Output: hello world

Exercise 1.11: store 4 and5 in two variables and directly print teir sum
"""

### START CODE HERE ### (≈ 3 lines of code)



### END CODE HERE ###

"""Expected Output: 9

Exercise 1.12 concatinate 2 strings using plus operator x=abc y= mno
"""

### START CODE HERE ### (≈ 3 lines of code)



### END CODE HERE ###

"""Expected Output: abcmno

Exercise 1.13: Create a variable named carname and assign the value Volvo to it. and print carname
"""

### START CODE HERE ### (≈ 3 lines of code)



### END CODE HERE ###

"""Expected Output: Volvo

# Python Numbers
**There are three numeric types in Python:**

* ** int**
* ** float**
*  **complex**

**Int **:

Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length.
"""

x = 1
y = 35656222554887711
z = -3255522

print(type(x))                           # To verify the type of any object in Python, use the type() function
print(type(y))
print(type(z))

"""**Float :**

Float, or "floating point number" is a number, positive or negative, containing one or more decimals.
"""

x = 1.10
y = 1.0
z = -35.59

print(type(x))
print(type(y))
print(type(z))

"""**Complex :**

Complex numbers are written with a "j" as the imaginary part.
"""

x = 3+5j
y = 5j
z = -5j

print(type(x))
print(type(y))
print(type(z))

"""**Exercise 1.14:**

Find whether E=3.4j is integer, float or complex.
"""

### START CODE HERE ### (1 line of code)

### END CODE HERE ###

"""```
# This is formatted as code
```

  **Expected output:**  class 'complex'

Exercise 1.15:  Find whether E=5.4 is integer, float or complex.
"""

### START CODE HERE ### (≈ 3 lines of code)

E=5.4

​

### END CODE HERE ###

"""Expected output: class 'float'

# Python Casting

**Specify a Variable Type :**

There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.

Casting in python is therefore done using constructor functions:

 A **literal** is a notation for representing a fixed value in source code.

*  **int()** - constructs an integer number from an integer literal, a float literal (by rounding down to the previous whole number), or a string literal (providing the string represents a whole number)
*  **float()** - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)
* **str()** - constructs a string from a wide variety of data types, including strings, integer literals and float literals

**Integers**:
"""

x = int(1)         # x will be 1
y = int(2.8)       # y will be 2
z = int("3")       # z will be 3

"""**Floats:**"""

x = float(1)         # x will be 1.0
y = float(2.8)       # y will be 2.8
z = float("3")       # z will be 3.0
w = float("4.2")     # w will be 4.2

"""**Strings:**"""

x = str("s1")       # x will be 's1'
y = str(2)          # y will be '2'
z = str(3.0)        # z will be '3.0'

"""Main advantage of type casting is you can print and integer and a string in the same line.

**Example: **
"""

a = " kingdoms in Westeros"
b = str(7)

print (b + a)

"""**Excercise 1.6:**

Create a variable **x** and assign the integer 3 to it. Create another variable **y** and assign string '4' to it. Add both variables using **int** function.
"""

### START CODE HERE ### (≈ 4 lines of code)




### END CODE HERE ###

"""**Expected Output:**

7

Exercise 1.17

Create a variable x and assign the integer 9 to it. Create another variable y and assign string '99' to it. Add both variables using int function.
"""

### START CODE HERE ### (≈ 4 lines of code)

​

​

​

​

### END CODE HERE ###

"""Expected output: 108

#Python Strings

**String literals**:

String literals in python are surrounded by either single quotation marks, or double quotation marks.

'hello' is the same as "hello".

Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters. Square brackets can be used to access elements of the string.
"""

a = "Hello, World!"
print(a[1])                             # Gets the character at position 1 (remember that the first character has the position 0)

b = "Hello, World!"
print(b[2:5])                          #Gets the characters from position 2 to position 5 (not included)

"""**The strip() method:**

The strip() method removes any whitespace from the beginning or the end:
"""

a = " Hello, World! "
print(a.strip())                     # returns "Hello, World!"

"""**The len() method:**

The len() method returns the length of a string
"""

a = "Hello, World!"
print(len(a))

"""**The lower() method:**

The lower() method returns the string in lower case
"""

a = "Hello, World!"
print(a.lower()) 
print(a)                                         #Orignal value of a is not changed
a=a.lower()                                      #Orignal value of a is changed
print(a)

"""**The upper() method:**

The upper() method returns the string in upper case
"""

a = "Hello, World!"
print(a.upper())

"""**The replace() method :**

The replace() method replaces a string with another string.
"""

a = "Hello, World!"
print(a.replace("H", "J"))

"""**The split() method :**

The split() method splits the string into substrings if it finds instances of the separator
"""

a = "Hello, World!"
print(a.split(","))                             # returns ['Hello', ' World!']

"""**Exercise 1.18:**

Get the first character of the string **str** and print it.
"""

### START CODE HERE ### (≈ 3 lines of code)


### END CODE HERE ###

"""**Expected Output:**

L

**Exercise 1.19:**

Get the characters from position 3 to position 8 (not included) using strinf slicing method and print it.
"""

### START CODE HERE ### (≈ 3 lines of code)


### END CODE HERE ###

"""**Expected Output:**

rning

**Exercise 1.20:** 

For E="HELLO FRIENS" make the string lowercase, print, replace **s** by **d** and return the length of the string.
"""

### START CODE HERE ### (≈ 4-5 lines of code)
 

### END CODE HERE ###

"""**Expected Output:**

hello friens

hello friend

12

Exercise 1.21:

Get the first character of the string str and print it.
"""

### START CODE HERE ### (≈ 3 lines of code)

str="python"

​

​

### END CODE HERE ###

"""Expected output:

p

Exercise 1.22:

Get the characters from position 3 to position 8 (not included) using strinf slicing method and print it.
"""

### START CODE HERE ### (≈ 3 lines of code)

str="Learning python"

​

​

### END CODE HERE ###

"""Expected Output:

rning

Exercise 1.23

For E="HELLO " make the string lowercase, print, replace o by e and return the length of the string.
"""

### START CODE HERE ### (≈ 4-5 lines of code)

                  

  

​

### END CODE HERE ###

"""Expected Output:

hello

helle

5

Exercise 1.24: remove any whitespace from the beginning or the end: of the string containing spaces
"""

### START CODE HERE ### (≈ 4-5 lines of code)

                  

  

​

### END CODE HERE ###

"""Expected Output:   hello world

Exercise 1.25:  find the length of hekathon
"""

### START CODE HERE ### (≈ 4-5 lines of code)

                  

  

​

### END CODE HERE ###

"""Expected Output: 8

Exercise 1.26 : convert welcome to upper case
"""

### START CODE HERE ### (≈ 4-5 lines of code)

                  

  

​

### END CODE HERE ###

"""Expected Output: WELCOME

# Great Job!

For solutions click here

(https://drive.wps.com/d/ACP1xjH1mvgjgYDAuo38EQ)
"""